---
layout: post
title:  "Created my first docker image!"
description: Quest of a developer, blog, docker, docker-machine, debian, jetty
date:   2016-10-24 18:54:09 +0200
commentIssueId: 5
published: true
---

Dear readers,

I want to run my REST API for the "metjekindnaarbuiten" app on a Linux server which is build, shipped and runned by [Docker](https://www.docker.com). The only reason for this is that I want to get hands-on experience with Docker. As Linux distribution I have chosen the [Debian ("Jessie" release)](https://www.debian.org) and on top [Jetty](http://www.eclipse.org/jetty) as Java HTTP (Web) Server and Java Servlet container.
 
Before I start I want to state that the [Docker documentation](https://docs.docker.com) is very good and complete. It contains lots of step-by-step guides and tutorials. So I only describe which specific steps I executed to get my Linux server with Jetty up and running.  

The first step is to install Docker. I use Windows as operation system so I installed the stable Docker release for [Windows](https://docs.docker.com/docker-for-windows). Run ```docker -v``` to check if the Docker installation is successful. 

To be able to run Docker instances on your local Windows PC, [Docker Machine](https://docs.docker.com/machine) is automatically installed. Docker Machine requires Hyper-V to run. See this [manual](https://docs.docker.com/machine/drivers/hyper-v) how to activate and configure Hyper-V. I have added a default host by executing this command ```docker-machine create --driver hyperv default```. Adding a default host saves you time, because when executing docker-machine commands you do not have to enter the host name. Check your environments by executing ```docker-machine ls```.

Important to mention is that in order to be able to work with docker-machine you have to run your command prompt as administrator. When you forget this, you will fail to start your Docker environment. See this [site](https://www.cnet.com/how-to/always-run-a-program-in-administrator-mode-in-windows-10) how to run your command prompt as administrator by default.

The next step is to create your image (see this [link](https://docs.docker.com/engine/tutorials/dockerimages) for instructions). In my case I just updated an existing Debian Jetty image from [Coldrye](https://github.com/coldrye-docker/coldrye-debian-jetty). I executed these commands to create my own image:

 1. ```docker pull coldrye/debian-jetty:9-4-0-jessie-latest``` to download the image. 
 2. ```docker run -d -p 8000:8080 coldrye/debian-jetty:9-4-0-jessie-latest``` to run the image.
 3. ```docker ps``` to see the running docker containers, note the container id of your coldrye/debian-jetty container.
 4. ```docker cp c:\docker\test.war <container id>:/user/share/jetty/webapps``` to copy the test.war file to your running container. Repeat this steps for the 'test.d' folder and 'test.xml' files. This test.war and related files are part of the [Jetty demonstration applications](http://www.eclipse.org/jetty/documentation/9.3.x/quickstart-deploying-webapps.html).
 5. ```docker commit -m "Add test.war to image" -a "<author name>" <container id> <dockeraccount>/debian-jetty``` to commit these changes to a new image named <dockeraccount>/debian-jetty.
 6. ```docker run -d -p 8888:8080 <dockeraccount>/debian-jetty``` to start a container based on your own image. 
 7. Test your container by starting this url [localhost:8888/test](localhost:8888/test) in your browser.
 7. ```docker push <dockeraccount>/debian-jetty``` which pushes it to [https://hub.docker.com](https://hub.docker.com). Of course you have to create an account first. My public profile is [https://hub.docker.com/u/marinusgeuze](https://hub.docker.com/u/marinusgeuze).

With these 7 steps I created my first Docker image and reached my goal to get a Linux server with Jetty up and running on my local Windows machine. :-)

One command I found very useful is ```docker exec -it <containerid> bash``` which starts a SSH session to your container.

In my next blog I will create a Spring Boot application which contains the REST API for my app. This application will of course be build, shipped and runned by Docker.

**Reminder:** My goal is to learn therefore feedback, comments and questions about this blog or related code are very welcome.

Happy coding,

Marinus